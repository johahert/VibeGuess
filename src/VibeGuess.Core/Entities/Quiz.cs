using System.ComponentModel.DataAnnotations;
using VibeGuess.Core.Interfaces;

namespace VibeGuess.Core.Entities;

/// <summary>
/// Represents a music quiz generated by AI.
/// </summary>
public class Quiz : ExpirableEntity, IUserOwned
{
    /// <summary>
    /// Foreign key to the User who created this quiz (implements IUserOwned).
    /// </summary>
    public Guid UserId { get; set; }

    /// <summary>
    /// AI-generated title for the quiz based on the prompt.
    /// </summary>
    [Required]
    [MaxLength(200)]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Original user prompt used to generate this quiz.
    /// </summary>
    [Required]
    [MaxLength(1000)]
    public string UserPrompt { get; set; } = string.Empty;

    /// <summary>
    /// Quiz format type.
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string Format { get; set; } = string.Empty; // MultipleChoice, FreeText, Mixed

    /// <summary>
    /// Difficulty level of the quiz.
    /// </summary>
    [Required]
    [MaxLength(20)]
    public string Difficulty { get; set; } = string.Empty; // Easy, Medium, Hard

    /// <summary>
    /// Number of questions in the quiz.
    /// </summary>
    [Range(5, 20)]
    public int QuestionCount { get; set; }

    /// <summary>
    /// Language of the quiz content (ISO 639-1 code).
    /// </summary>
    [Required]
    [MaxLength(5)]
    public string Language { get; set; } = "en";

    /// <summary>
    /// Whether this quiz includes audio playback.
    /// </summary>
    public bool IncludesAudio { get; set; } = true;

    /// <summary>
    /// Current status of the quiz.
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string Status { get; set; } = "Generated"; // Generated, Archived, Deleted



    /// <summary>
    /// Number of times this quiz has been played.
    /// </summary>
    public int PlayCount { get; set; } = 0;

    /// <summary>
    /// Average score across all sessions (percentage).
    /// </summary>
    public decimal? AverageScore { get; set; }

    /// <summary>
    /// Whether the quiz is publicly discoverable.
    /// </summary>
    public bool IsPublic { get; set; } = false;

    /// <summary>
    /// Tags for categorizing the quiz.
    /// </summary>
    [MaxLength(500)]
    public string Tags { get; set; } = string.Empty;

    // Navigation properties

    /// <summary>
    /// The user who created this quiz.
    /// </summary>
    public User User { get; set; } = null!;

    /// <summary>
    /// Questions in this quiz.
    /// </summary>
    public ICollection<Question> Questions { get; set; } = new List<Question>();

    /// <summary>
    /// Quiz sessions for this quiz.
    /// </summary>
    public ICollection<QuizSession> Sessions { get; set; } = new List<QuizSession>();

    /// <summary>
    /// Generation metadata for this quiz.
    /// </summary>
    public QuizGenerationMetadata? GenerationMetadata { get; set; }

    // Helper properties

    /// <summary>
    /// Whether the quiz is available for play.
    /// </summary>
    public bool IsAvailable => Status == "Generated" && !IsExpired;

    /// <summary>
    /// Override the default expiration to set 30 days from creation.
    /// </summary>
    public override void UpdateTimestamp()
    {
        base.UpdateTimestamp();
        if (ExpiresAt == default)
        {
            ExpiresAt = DateTime.UtcNow.AddDays(30);
        }
    }
}