// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VibeGuess.Infrastructure.Data;

#nullable disable

namespace VibeGuess.Infrastructure.Migrations
{
    [DbContext(typeof(VibeGuessDbContext))]
    [Migration("20250921205117_FixCascadePaths3")]
    partial class FixCascadePaths3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VibeGuess.Core.Entities.AnswerOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OptionLabel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_AnswerOptions_QuestionId");

                    b.HasIndex("QuestionId", "IsCorrect")
                        .HasDatabaseName("IX_AnswerOptions_QuestionId_IsCorrect");

                    b.HasIndex("QuestionId", "OrderIndex")
                        .IsUnique()
                        .HasDatabaseName("IX_AnswerOptions_QuestionId_OrderIndex");

                    b.ToTable("AnswerOptions", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HintText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("TimeLimitSeconds")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_Questions_QuizId");

                    b.HasIndex("TrackId");

                    b.HasIndex("QuizId", "OrderIndex")
                        .IsUnique()
                        .HasDatabaseName("IX_Questions_QuizId_OrderIndex");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AverageScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IncludesAudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("en");

                    b.Property<int>("PlayCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Generated");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserPrompt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Quizzes_CreatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Quizzes_UserId");

                    b.HasIndex("IsPublic", "Status")
                        .HasDatabaseName("IX_Quizzes_IsPublic_Status");

                    b.HasIndex("Status", "ExpiresAt")
                        .HasDatabaseName("IX_Quizzes_Status_ExpiresAt");

                    b.ToTable("Quizzes", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.QuizGenerationMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AiModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AiModelVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<decimal>("EstimatedCostCents")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(10,4)");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawPrompt")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RawResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokensConsumed")
                        .HasColumnType("int");

                    b.Property<int>("TracksFound")
                        .HasColumnType("int");

                    b.Property<int>("TracksValidated")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Warnings")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AiModel")
                        .HasDatabaseName("IX_QuizGenerationMetadata_AiModel");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_QuizGenerationMetadata_CreatedAt");

                    b.HasIndex("QuizId")
                        .IsUnique()
                        .HasDatabaseName("IX_QuizGenerationMetadata_QuizId");

                    b.ToTable("QuizGenerationMetadata", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CurrentQuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnableHints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxPossibleScore")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionConfig")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ShuffleQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTimeSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_QuizSessions_QuizId");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_QuizSessions_StartedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_QuizSessions_UserId");

                    b.HasIndex("Status", "ExpiresAt")
                        .HasDatabaseName("IX_QuizSessions_Status_ExpiresAt");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_QuizSessions_UserId_Status");

                    b.ToTable("QuizSessions", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.SpotifyToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Bearer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_SpotifyTokens_ExpiresAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SpotifyTokens_UserId");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_SpotifyTokens_UserId_IsActive");

                    b.ToTable("SpotifyTokens", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlbumImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AllArtists")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AudioFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableMarkets")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("bit");

                    b.Property<string>("Isrc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("PreviewUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpotifyTrackId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpotifyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AlbumName")
                        .HasDatabaseName("IX_Tracks_AlbumName");

                    b.HasIndex("ArtistName")
                        .HasDatabaseName("IX_Tracks_ArtistName");

                    b.HasIndex("Popularity")
                        .HasDatabaseName("IX_Tracks_Popularity");

                    b.HasIndex("ReleaseDate")
                        .HasDatabaseName("IX_Tracks_ReleaseDate");

                    b.HasIndex("SpotifyTrackId")
                        .IsUnique()
                        .HasDatabaseName("IX_Tracks_SpotifyTrackId");

                    b.ToTable("Tracks", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("HasSpotifyPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("User");

                    b.Property<string>("SpotifyUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("SpotifyUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_SpotifyUserId");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("IX_Users_Role_IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.UserAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerMetadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FreeTextAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PlaybackCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PointsEarned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("QuestionStartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedAnswerOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TimeToAnswerSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("UsedHint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AnsweredAt")
                        .HasDatabaseName("IX_UserAnswers_AnsweredAt");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_UserAnswers_QuestionId");

                    b.HasIndex("QuizSessionId")
                        .HasDatabaseName("IX_UserAnswers_QuizSessionId");

                    b.HasIndex("SelectedAnswerOptionId");

                    b.HasIndex("IsCorrect", "PointsEarned")
                        .HasDatabaseName("IX_UserAnswers_IsCorrect_PointsEarned");

                    b.HasIndex("QuizSessionId", "QuestionId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserAnswers_QuizSessionId_QuestionId");

                    b.ToTable("UserAnswers", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DefaultDifficulty")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Medium");

                    b.Property<int>("DefaultQuestionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<bool>("EnableAudioPreview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableHints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastSelectedDeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("en");

                    b.Property<bool>("RememberDeviceSelection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShuffleQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserSettings_UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.AnswerOption", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Question", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VibeGuess.Core.Entities.Track", "Track")
                        .WithMany("Questions")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Quiz");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Quiz", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.User", "User")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.QuizGenerationMetadata", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.Quiz", "Quiz")
                        .WithOne("GenerationMetadata")
                        .HasForeignKey("VibeGuess.Core.Entities.QuizGenerationMetadata", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.QuizSession", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.Quiz", "Quiz")
                        .WithMany("Sessions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VibeGuess.Core.Entities.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.SpotifyToken", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.User", "User")
                        .WithMany("SpotifyTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.UserAnswer", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VibeGuess.Core.Entities.QuizSession", "QuizSession")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VibeGuess.Core.Entities.AnswerOption", "SelectedAnswerOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SelectedAnswerOptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Question");

                    b.Navigation("QuizSession");

                    b.Navigation("SelectedAnswerOption");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.UserSettings", b =>
                {
                    b.HasOne("VibeGuess.Core.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("VibeGuess.Core.Entities.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.AnswerOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Quiz", b =>
                {
                    b.Navigation("GenerationMetadata");

                    b.Navigation("Questions");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.QuizSession", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.Track", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("VibeGuess.Core.Entities.User", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("QuizSessions");

                    b.Navigation("Settings");

                    b.Navigation("SpotifyTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
